 # Stack, Subclass, Inheritance practice
 
 class Stack:
    def __init__(self):
        self.__stk = []

    def push(self, val):
        self.__stk.append(val)

    def pop(self):
        val = self.__stk[-1]
        del self.__stk[-1]
        return val
    
    def __str__(self):
        return str(self.__stk)

class CountingStack(Stack):
    def __init__(self):
    #
    # Fill the constructor with appropriate actions.
    #
        Stack.__init__(self)
        self.count = 0

    def get_counter(self):
    #
    # Present the counter's current value to the world.
    #
        return (self.count)
        
    def cpop(self):
    #
    # Do pop and update the counter.
    #
        self.pop
        self.count += 1


stk = CountingStack()
for i in range(100):
    stk.push(i)
    stk.cpop()
print(stk.get_counter())



